
import java.util.PriorityQueue;
import java.util.Random;

public class AirCraftFactory {

	protected static final int SEED = 10;
	protected static final int priority = 1;

	protected static double fuel;
	protected static Random rand = new Random();
	protected static PriorityQueue<AirCraft> Priorityqueue; //if fuel is low of rlanding aircraft add to PQ

	//static ArrayList<Plane> listPlanes = new ArrayList<Plane>(); // this should be a priority queue in runway class

	//statics only exist in a single existance 


	//private static long seedTime = System.currentTimeMillis(); good idea to implement after testing

	protected static double minVal = 0.006; //spawn value
	protected static double maxVal = 0.001; //spawn value
	protected static double generate;
	protected static Random spawn = new Random(SEED);

	protected static int max = 2;
	protected static int min = 1;
	protected static int fuelVal;
	
	protected static int comercialMax = CommercialFlight.maxFuel;
	protected static int commercialMin = CommercialFlight.minFuel;
	protected static int lightMax = LightAircraft.maxFuel;
	protected static int lightMin = LightAircraft.minFuel;
	
	protected static int comLand = CommercialFlight.minFuelToLand;
	protected static int lightLand = LightAircraft.minFuelToLand;



	public AirCraftFactory(int seed) {


	}
	
	public static int setLightFuel(){
		fuelVal = rand.nextInt(lightMax - lightMin + 1) + lightMin;
		return fuelVal;
	}
	
	public static int setComFuel(){
		fuelVal = rand.nextInt(comercialMax - commercialMin + 1) + commercialMin;
		return fuelVal;
	}

	/**
	 * @return randomy generated fuel level between 1 to 10
	 */
	
	public static void printFuel(){
		for(int i=0; i< Simulation.getRunTime();i++){
			fuelVal = rand.nextInt(max - min + 1) + min;
			System.out.println(fuelVal);
		}
	}

	public static double gen(){
		generate = minVal + (maxVal - minVal) * spawn.nextDouble();
		return generate;
	}

	public static String genToString(){
		String temp = String.valueOf(gen());
		temp = temp.substring(0, Math.min(temp.length(), 5));
		return temp;
	}

	/**
	 * Adding aircrafts to linkedlists  according to creation probabilities and fuel value
	 */
	public static void createPlanes(){
		for(int i = 0; i < Simulation.getRunTime(); i++){
			if(genToString().equals(LightAircraft.getSpawnValue())){
				AirCraft light = new LightAircraft();
				int a = setLightFuel();
				if(a <= lightLand){
					Runway.addToPriorityQueue(light);
					System.out.println(light.toString() + " ADDING TO PRIORITY " + a);

				}else{
					Runway.addToQueueCheck(light);
					System.out.println(light.toString() + " ADDING TO NORMAL");
				}
			}else if(genToString().equals(Glider.getSpawnValue())){
				AirCraft glider = new Glider();
				AirCraft lightAir = createLight();
				int b = 40; //20minutes 
				if(b <= lightLand){
					Runway.addToPriorityQueue(lightAir);
					System.out.println(lightAir.toString() + " ADDING TO PRIORITY " + b);
				}else{
					System.out.println(glider.toString() + "  ADDING TO NORMAL");
					Runway.addToQueueCheck(lightAir);
					Runway.addToTakeOffQueue(glider);
					
				}
			}else if(genToString().equals(CommercialFlight.pToString())){
				AirCraft comFlight = new CommercialFlight();
				int c =  setComFuel();
				if(c <= comLand){
					Runway.addToPriorityQueue(comFlight);
					System.out.println(comFlight.toString() + " ADDING TO PRIORITY " + c);
				}else{
					Runway.addToQueueCheck(comFlight);
					System.out.println(comFlight.toString() + " ADDING TO NORMAL");
				}
			}
		}
	}

	public static AirCraft createLight(){
		AirCraft light = new LightAircraft();
		return light;
	}
	
}
