import java.util.ArrayList;
import java.util.Random;

public class AirCraftFactory {
 
	private static final double commercialCreationProbability = 0.95; //p value needs to be determined
	private static final double lightCreationProbability = 0.005;
	private static final double gliderCreationProbability = 0.002;
	
	protected static int fuel = 1;
	protected static Random rand = new Random(fuel);

	//static ArrayList<Plane> listPlanes = new ArrayList<Plane>(); // this should be a priority queue in runway class

	//statics only exist in a single existance 


	//private static long seedTime = System.currentTimeMillis(); good idea to implement after testing

	private static double num; // maybe make local

	private static int listPlaneSize = 100; // size of array list , this should be in runway class

	private static int seed = 20;



	public AirCraftFactory(int seed) {
		buildPlanes();

	}


	public static void main(String[] args) {

		System.out.println(seed);

		buildPlanes();

	}

	/*
	 * private static int randomGenerator() { Random generator = new
	 * Random(seedTime); // is random.math better num = generator.nextInt(3) +
	 * 1; System.out.println(num); return num; }
	 */

	/*
	 * private static double randomGenerator() { Random generator = new
	 * Random(seedTime); // is random.math better num = generator.nextDouble();
	 * System.out.println(num); return num; }
	 */

	public static void buildPlanes() {
		Random generator = new Random(seed);
		for (int i = 0; i < listPlaneSize; i++) // ensures the queue is full , could be implemented seperatly
		{
			num = generator.nextDouble();
			System.out.println(num);

			if (num <= gliderCreationProbability) { // these names are too big

				AirCraft glider = new Glider();
				Runway.addToQueue(glider);
				System.out.println("glider added");

			}

			else if (num <= lightCreationProbability) {

				AirCraft lightAircraft = new LightAircraft();
				Runway.addToQueue(lightAircraft);
				System.out.println("Light Aircraft added");

			}

			else if (num <= commercialCreationProbability) {

				AirCraft commercialAircraft = new CommericalAircraft(); //method needs to e defined
				Runway.addToQueue(commercialAircraft);
				System.out.println("Commercial Aircraft added");

			}
		}

	}


	/*public ArrayList<Plane> getQueue() {

		return listPlanes; // no point of this if the queue is within runway
	}*/  

}
