
import java.util.Random;

/*
 * This Class contain's code to simulate a one runway airport.
 * Written by: Assa Singh
 * Date: 2/03/14
 */

public class Simulation {
	
	
	protected static final int SEED = 10;
	static Random random = new Random(SEED);
	static double rand = random.nextDouble();
	static boolean runwayBusy;
	static int busyness;

	public static void main(String[] args) {
		setP();
		AirCraftFactory.createPlanes();
		Counter.stats();
		for(int i = 0; i < 100; i++){
			run();
		}
	}
	
	public static void setP(){
		CommercialFlight.p = 0.003;
	}

	protected static int runTime = 100; //simulation loops
	//private static final int WIDTH = 50;
	private static Runway runway; 
	protected static boolean wantsToLand;



	/**
	 * @param number of loops to run the simulation 
	 * @param seed random seed
	 */
	public Simulation(int loops, int seed){
		//this(WIDTH, seed); //construct a runway with a seed

	}
	
	


	/**
	 *Run the simulation 
	 */
	public static void run(){ 
		/*for(int i = 0; i < runTime; i++){
			AirCraft a = new AirCraft();
			if(AirCraft.wantsToLand() == true){
				Runway.landingQueue.offer(a); //insert type aircraft into priority queue
			}else if (AirCraft.wantsToTakeOff() == true){
				Runway.takeOffQueue.offer(a); //insert type aircraft to take off priority queue
			}
		}*/
		
		//if the runway is clear remove a plane from landing and increment landing counter
		busyness --;
		if(busyness == 0){
			runwayBusy = false; //change runway to not busy so the next plane can land or take off
		}
		if(Runway.normalLanding.peek() != null && runwayBusy == false){
			//checks takeOff queue to see if it is clear and checks runway busy so nothing can happen while busy
				AirCraft landingPlane = Runway.normalLanding.poll(); //remove the plane from the landing queue
				Counter.incrementLanding(); //increment the number of planes landed so far
				busyness = landingPlane.getLandingTime(); //busyness is equal to landing time of the currently landing plane
				//this means that the runway will be busy until this plane finishes landing
				runwayBusy = true; //make runway busy intil this plane has landed
		}
		else if(Runway.takeOffQueue.peek() != null && runwayBusy == false){
				AirCraft landingPlane = Runway.takeOffQueue.poll(); //remove the plane from the landing queue
				Counter.incrementTakeOff(); //increment the number of planes landed so far
				busyness = landingPlane.getTakeOffTime(); //busyness is equal to take off time of the currently landing plane
				//this means that the runway will be busy until this plane finishes landing
				runwayBusy = true; //make runway busy intil this plane has landed
		}
		
		Counter.stats();
	}

	/**
	 * @return no of loops
	 */
	public static int getRunTime() {
		return runTime;
	}


	public static void reset(){
		//reset the runway
		runTime = 0;
		runway.clear(); //clear runway

	}



}
