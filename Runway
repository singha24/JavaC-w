import java.util.Queue;
import java.util.LinkedList;

public class Runway {
	// queue for taking off planes 
	private  LinkedList<AirCraft> runwayQueue ; 
	//queue for landing planes
    private  LinkedList<AirCraft> airBorneQueue; 
    private counter Counter;
    private boolean isClear;
    
    
	
    public Runway() {
    	runwayQueue = new  PriorityQueue<Aircraft>();
    	airBorneQueue = new  PriorityQueue<Aircraft>();
        counter = new Counter();
        isClear = true;
}
    
    public void run(){
    	
    	for (Aircraft aircraft : runwayQueue.toArray(new Aircraft[runwayQueue.size()])){ 
    	 aircraft.run();
    	 runwayQueue.add(aircraft);
    	 counter.incrementWaitingTime(aircraft.getWaitingTime());
    	 }
    
    for (Aircraft  aircraft : airBorneQueue.toArray(new Aircraft[airBorneQueue.size()])) {
		
    	aircraft.run();
    	airBorneQueue.add(aircraft);
    	counter.incrementWaitingTime(aircraft.getWaitingTime());
    }
    		   	

}

  public  LinkedList<Aircraft> getAirborneQueue(){
    	return airBorneQueue;
    }
public  LinkedList<Aircraft> getRunwayQueue() {
	return runwayQueue ;
}


public Counter getCounter() {
	return counter;
}

public boolean isClear() {
return isClear;
}

public void setClear(boolean isClear) {
this.isClear = isClear;
}

public void clearRunway() {
	counter.clear();
	airBorneQueue.clear();
	runwayQueue.clear();
}


	
}
